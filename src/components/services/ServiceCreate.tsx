import React from "react";
import {
  Create,
  SimpleForm,
  TextInput,
  NumberInput,
  SelectInput,
  required,
  minValue,
  maxValue,
  maxLength,
} from "react-admin";
import { Box, Typography, Alert, InputAdornment } from "@mui/material";

// Validation
const validateTitle = [required("T√™n d·ªãch v·ª• l√† b·∫Øt bu·ªôc"), maxLength(100)];
const validateDescription = [maxLength(500)];
const validatePrice = [
  required("Gi√° l√† b·∫Øt bu·ªôc"),
  minValue(0, "Gi√° ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0"),
  maxValue(999999, "Gi√° kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 999,999"),
];
const validateDuration = [
  required("Th·ªùi gian l√† b·∫Øt bu·ªôc"),
  minValue(1, "Th·ªùi gian t·ªëi thi·ªÉu 1 ph√∫t"),
  maxValue(1440, "Th·ªùi gian kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 1440 ph√∫t (24h)"),
];

export const ServiceCreate: React.FC = () => {
  const formatVND = (value: number): string => {
    if (value === null || value === undefined) return "";
    return new Intl.NumberFormat("vi-VN").format(value);
  };

  const parseVND = (value: any): number | null => {
    if (value === null || value === undefined || value === "") return null;
    const cleanStr = value.toString().replace(/\./g, "");
    const num = parseInt(cleanStr, 10);
    return isNaN(num) ? null : num;
  };

  return (
    <Create redirect="list">
      <SimpleForm>
        <Typography variant="h6" gutterBottom>
          Th√¥ng tin d·ªãch v·ª•
        </Typography>

        <Alert severity="info" sx={{ mb: 2 }}>
          <Typography variant="body2">
            T·∫°o d·ªãch v·ª• m·ªõi cho h·ªá th·ªëng. C√°c d·ªãch v·ª• s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã cho b·ªánh
            nh√¢n khi ƒë·∫∑t l·ªãch kh√°m.
          </Typography>
        </Alert>

        <TextInput
          source="title"
          label="T√™n d·ªãch v·ª•"
          validate={validateTitle}
          fullWidth
          helperText="VD: Kh√°m t·ªïng qu√°t, X√©t nghi·ªám m√°u, Si√™u √¢m tim..."
        />

        <TextInput
          source="description"
          label="M√¥ t·∫£"
          validate={validateDescription}
          multiline
          rows={4}
          fullWidth
          helperText="M√¥ t·∫£ chi ti·∫øt v·ªÅ d·ªãch v·ª• (t·ªëi ƒëa 500 k√Ω t·ª±)"
        />

        <Box sx={{ mt: 2, mb: 2 }}>
          <Typography variant="subtitle2" gutterBottom color="primary">
            Th√¥ng tin gi√° v√† th·ªùi gian
          </Typography>
        </Box>

        <Box display="flex" gap={2} width="100%">
          <NumberInput
            source="price"
            label="Gi√° d·ªãch v·ª•"
            validate={validatePrice}
            format={formatVND}
            parse={parseVND}
            helperText="Nh·∫≠p gi√° d·ªãch v·ª• (VND)"
            InputProps={{
              endAdornment: <InputAdornment position="end">‚Ç´</InputAdornment>,
            }}
            sx={{ flex: 1 }}
          />

          <NumberInput
            source="durationInMinutes"
            label="Th·ªùi gian (ph√∫t)"
            validate={validateDuration}
            defaultValue={30}
            helperText="Th·ªùi gian th·ª±c hi·ªán d·ªãch v·ª•"
            InputProps={{
              endAdornment: (
                <InputAdornment position="end">ph√∫t</InputAdornment>
              ),
            }}
            sx={{ flex: 1 }}
          />
        </Box>

        <SelectInput
          source="status"
          label="Tr·∫°ng th√°i"
          choices={[
            { id: 0, name: "Ho·∫°t ƒë·ªông" },
            { id: 1, name: "Ng∆∞ng ho·∫°t ƒë·ªông" },
          ]}
          defaultValue="Active"
          helperText="Ch·ªâ d·ªãch v·ª• 'Ho·∫°t ƒë·ªông' m·ªõi hi·ªÉn th·ªã cho b·ªánh nh√¢n"
        />

        <Alert severity="success" sx={{ mt: 2 }}>
          <Typography variant="body2">
            <strong>üí° M·∫πo:</strong> ƒê·∫∑t gi√° v√† th·ªùi gian h·ª£p l√Ω ƒë·ªÉ t·ªëi ∆∞u tr·∫£i
            nghi·ªám ƒë·∫∑t l·ªãch
          </Typography>
        </Alert>
      </SimpleForm>
    </Create>
  );
};
