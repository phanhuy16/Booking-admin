import React from "react";
import {
  Create,
  SimpleForm,
  ReferenceInput,
  SelectInput,
  DateInput,
  BooleanInput,
  required,
  TimeInput,
} from "react-admin";
import { Box, Typography, Alert } from "@mui/material";

// Validation cho th·ªùi gian
const validateStartTime = (value: any, allValues: any) => {
  if (!value) return "Gi·ªù b·∫Øt ƒë·∫ßu l√† b·∫Øt bu·ªôc";

  // Ki·ªÉm tra n·∫øu c√≥ endTime, startTime ph·∫£i nh·ªè h∆°n endTime
  if (allValues.endTime) {
    const start = convertTimeToMinutes(value);
    const end = convertTimeToMinutes(allValues.endTime);

    if (start >= end) {
      return "Gi·ªù b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n gi·ªù k·∫øt th√∫c";
    }
  }

  return undefined;
};

const validateEndTime = (value: any, allValues: any) => {
  if (!value) return "Gi·ªù k·∫øt th√∫c l√† b·∫Øt bu·ªôc";

  // Ki·ªÉm tra n·∫øu c√≥ startTime, endTime ph·∫£i l·ªõn h∆°n startTime
  if (allValues.startTime) {
    const start = convertTimeToMinutes(allValues.startTime);
    const end = convertTimeToMinutes(value);

    if (end <= start) {
      return "Gi·ªù k·∫øt th√∫c ph·∫£i l·ªõn h∆°n gi·ªù b·∫Øt ƒë·∫ßu";
    }
  }

  return undefined;
};

// Helper: Convert time string to minutes for comparison
const convertTimeToMinutes = (timeStr: string): number => {
  if (!timeStr) return 0;
  const parts = timeStr.split(":");
  return parseInt(parts[0]) * 60 + parseInt(parts[1]);
};

export const ScheduleCreate: React.FC = () => {
  // Transform data tr∆∞·ªõc khi submit
  const transform = (data: any) => {
    // Parse time to ensure correct format
    const parseTime = (time: string) => {
      if (!time) return "00:00:00";
      // If format is HH:mm, add :00
      if (time.length === 5) {
        return `${time}:00`;
      }
      // If format is HH:mm:ss, return as is
      return time;
    };

    const transformed = {
      doctorId: parseInt(data.doctorId),
      date: data.date, // ISO string format: "2025-11-01"
      startTime: parseTime(data.startTime),
      endTime: parseTime(data.endTime),
      isAvailable: data.isAvailable !== undefined ? data.isAvailable : true,
    };

    return transformed;
  };

  return (
    <Create redirect="list" transform={transform}>
      <SimpleForm>
        <Typography variant="h6" gutterBottom>
          T·∫°o l·ªãch l√†m vi·ªác m·ªõi
        </Typography>

        <Alert severity="info" sx={{ mb: 2 }}>
          <Typography variant="body2">
            Ch·ªçn b√°c sƒ©, ng√†y v√† th·ªùi gian l√†m vi·ªác. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t·∫°o
            l·ªãch l√†m vi·ªác cho b√°c sƒ© trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.
          </Typography>
        </Alert>

        <ReferenceInput source="doctorId" reference="doctors" label="B√°c sƒ©">
          <SelectInput
            optionText="fullName"
            validate={required("Vui l√≤ng ch·ªçn b√°c sƒ©")}
            fullWidth
          />
        </ReferenceInput>

        <DateInput
          source="date"
          label="Ng√†y l√†m vi·ªác"
          validate={required("Vui l√≤ng ch·ªçn ng√†y l√†m vi·ªác")}
          fullWidth
          helperText="Ch·ªçn ng√†y b√°c sƒ© s·∫Ω l√†m vi·ªác"
        />

        <Box sx={{ mt: 2, mb: 2 }}>
          <Typography variant="subtitle2" gutterBottom color="primary">
            Th·ªùi gian l√†m vi·ªác
          </Typography>
        </Box>

        <Box display="flex" gap={2} width="100%">
          <TimeInput
            source="startTime"
            label="Gi·ªù b·∫Øt ƒë·∫ßu"
            validate={validateStartTime}
            helperText="Ch·ªçn gi·ªù b·∫Øt ƒë·∫ßu l√†m vi·ªác"
            defaultValue="08:00"
            parse={(value) => {
              // ƒê·∫£m b·∫£o format HH:mm
              if (!value) return null;
              return value.length === 5 ? value : value.substring(0, 5);
            }}
            format={(value) => {
              // Format t·ª´ HH:mm:ss ho·∫∑c HH:mm v·ªÅ HH:mm
              if (!value) return "";
              return value.substring(0, 5);
            }}
            sx={{ flex: 1 }}
          />

          <TimeInput
            source="endTime"
            label="Gi·ªù k·∫øt th√∫c"
            validate={validateEndTime}
            helperText="Ch·ªçn gi·ªù k·∫øt th√∫c l√†m vi·ªác"
            defaultValue="17:00"
            parse={(value) => {
              if (!value) return null;
              return value.length === 5 ? value : value.substring(0, 5);
            }}
            format={(value) => {
              if (!value) return "";
              return value.substring(0, 5);
            }}
            sx={{ flex: 1 }}
          />
        </Box>

        <BooleanInput
          source="isAvailable"
          label="C√≤n tr·ªëng (cho ph√©p ƒë·∫∑t l·ªãch)"
          defaultValue={true}
          helperText="B·∫≠t n·∫øu b√°c sƒ© c√≤n nh·∫≠n l·ªãch h·∫πn trong khung gi·ªù n√†y"
        />

        <Alert severity="success" sx={{ mt: 2 }}>
          <Typography variant="body2">
            <strong>üí° M·∫πo:</strong> Click v√†o √¥ gi·ªù ƒë·ªÉ ch·ªçn t·ª´ b·∫£ng th·ªùi gian,
            ho·∫∑c nh·∫≠p tr·ª±c ti·∫øp theo format 24h (VD: 08:00, 14:30)
          </Typography>
        </Alert>
      </SimpleForm>
    </Create>
  );
};
